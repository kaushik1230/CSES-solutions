#include <bits/stdc++.h>

using namespace std;
// #define int long long
int mod = 1000000007;


bool dfs(int i, int n, vector<vector<int>> &adj,vector<int> &vis,vector<int>& par){
	
	vis[i]=1;
	
	
	bool df = true;
	for(auto x:adj[i]){
		if(x!=par[i]){

			if(vis[x]==0){
				par[x]=i;
				df=dfs(x,n,adj,vis,par);
				if(df==false) return false;
			}
			else{
				vector<int> ans;
				ans.push_back(x);
				ans.push_back(i);
				int temp = par[i];
				while(temp!=x){
					ans.push_back(temp);
					temp = par[temp];
				}
				ans.push_back(x);
				cout<<ans.size()<<endl;
				for(auto g:ans)
				{
					cout<<g<<" ";
				}
				return false;
			}
		}
	}
	return true;
}



signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n , m; // no of cities and no of roads
    cin>>n>>m;
	vector<vector<int>> adj(n+1);
	vector<int> vis(n+1,0); // 0 if unvis 	1 if in dfs		2 if out of dfs
	vector<int> par(n+1,-1);
	for(int i =0;i<m;i++){
		int a , b;
		cin>>a>>b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	bool x = true;
	for(int i = 1;i<=n;i++){
		if(vis[i]==0){
			par[i]=-1;
			x = dfs(i,n,adj,vis,par);
			if(x == false) return 0;
		}
	}

	cout<<"IMPOSSIBLE";
	
    return 0;
}
