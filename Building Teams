#include <bits/stdc++.h>

using namespace std;
// #define int long long
int mod = 1000000007;


bool dfs(int i, int n, vector<vector<int>> &adj,vector<int> &vis, int col){
	if(vis[i]==0){
		vis[i]=col;
	}
	else{
		if(vis[i]!=col) return false;
		else return true;
	}
	bool df = true;
	for(auto x:adj[i]){
		df = dfs(x,n,adj,vis,3-col);
		if(df == false) return false;
	}
	return true;
}

// int findSet(int i , vector<int>& parent){
// 	if(parent[i]==-1)
// 	return i;
// 	return parent[i]=findSet(parent[i],parent);
// }

// void union_Find(int x , int y , vector<int>& rank ,vector<int>& par){
// 	int set_x = findSet(x,par);
// 	int set_y = findSet(y,par);
// 	if(set_x!=set_y){
// 		int rank_x = rank[set_x];
// 		int rank_y = rank[set_y];
// 		if(rank_x > rank_y){
// 			rank[set_x]+=rank_y;
// 			par[set_y] = set_x;
// 		}
// 		else{
// 			rank[set_y]+=rank_x;
// 			par[set_x] = set_y;
// 		}
// 	}
// }

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n , m; // no of cities and no of roads
    cin>>n>>m;
	vector<vector<int>> adj(n+1);
	vector<int> vis(n+1,0);
	for(int i =0;i<m;i++){
		int a , b;
		cin>>a>>b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	bool x;
	for(int i = 1;i<=n;i++){
		if(vis[i]==0){
			x = dfs(i,n,adj,vis,1);
			if( x == false){
				cout<<"IMPOSSIBLE"<<endl;
				return 0;
			}
		}
	}

	for(int i =1;i<=n;i++){
		cout<<vis[i]<<" ";
	}

	// }
    return 0;
}
