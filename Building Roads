#include <bits/stdc++.h>

using namespace std;
// #define int long long
int mod = 1000000007;


// void dfs(int i, int j, vector<vector<int>> &vis,vector<vector<char>> &arr, int n ,int m){
// 	vis[i][j] = 1;
// 	int dr[]={0,-1,0,+1};
// 	int dc[]={-1,0,1,0};
// 	for(int z =0;z<4;z++)
// 	{
// 		int nr = i+dr[z];
// 		int nc = j+dc[z];
// 		if(nr>=0 && nr<n && nc>=0 && nc<m && vis[nr][nc]==0 && arr[nr][nc] == '.')
// 		{
// 			dfs(nr,nc,vis,arr,n,m);
// 		}
// 	}
// }

int findSet(int i , vector<int>& parent){
	if(parent[i]==-1)
	return i;
	return parent[i]=findSet(parent[i],parent);
}

void union_Find(int x , int y , vector<int>& rank ,vector<int>& par){
	int set_x = findSet(x,par);
	int set_y = findSet(y,par);
	if(set_x!=set_y){
		int rank_x = rank[set_x];
		int rank_y = rank[set_y];
		if(rank_x > rank_y){
			rank[set_x]+=rank_y;
			par[set_y] = set_x;
		}
		else{
			rank[set_y]+=rank_x;
			par[set_x] = set_y;
		}
	}
}

signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int n , m; // no of cities and no of roads
    cin>>n>>m;
	vector<int> sets(n+1,-1); //initialized all nodes as a seperate set 
	vector<int> rank(n+1,1);
	
	
	for(int i =0;i<m;i++){
		int a , b;
		cin>> a >> b;
		
		union_Find(a,b,rank,sets);
			
		
	}
	int ans = 0;
	vector<int> res;
	for(int i = 1;i<=n;i++){
		if(sets[i]==-1){
			ans++;
			res.push_back(i);
		}
	}
	cout<<ans-1<<endl;
	for(int i =0;i<res.size()-1;i++){
		cout<<res[i]<<" "<<res[i+1]<<endl;
	}
    return 0;
}
