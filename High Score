#include <bits/stdc++.h>
using namespace std;
 
typedef long long ll;
const ll INF = 1e18;
const int MOD = 1e9 + 7;
 
int main() {
    int n, m;
    cin >> n >> m;
    vector<vector<int>> edges;
    vector<vector<int>> adj(n+1);
    for (int i = 0; i < m; i++) {
        int u, v, d;
        cin >> u >> v >> d;
        edges.push_back({u,v,d});
	adj[u].push_back(v);
    }
  
    vector<long long> dist(n+1,LLONG_MIN);
    dist[1]=0*1LL;
    vector<int> affected_node;
    for(int i =0;i<n;i++)
    {
	for(auto x:edges)
	{
		int u = x[0];
		int v = x[1];
		int wt = x[2];
		if(dist[u]!=LLONG_MIN && dist[u]+wt>dist[v] )
		{
			if(i==n-1) {affected_node.push_back(v);}
			dist[v]=(dist[u]+wt)*1LL;
		}
	}
    }
    queue<int> q;
    vector<int> visited(n+1,-1);
    for(auto it:affected_node){q.push(it);visited[it]=1; }
    	
    while(!q.empty())
    {
      int node = q.front();
      
      q.pop();
      for(auto i:adj[node])
      {
	if(visited[i]!=1)
	{
		visited[i]=1;	
		q.push(i);
	}
      }
    }
    if(visited[n]!=-1) cout<< -1;
    else cout<< dist[n];
 
    return 0;
}
